#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

out float AmbientDiffuseLight;
out float SpecularLight;
out vec4 vVaryingColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MN;
uniform vec3 LightPosition_worldspace;

void main(){

	vec3 LightColor = vec3(1,1,1);
	float LightPower = 150.0;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	vec3 vertexNormal_cameraspace = mat3(V) * MN * vertexNormal_modelspace;
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;

	vec3 Position_cameraspace = (V * vec4(Position_worldspace,1)).xyz;

	vec3 LightPosition_cameraspace = (V * vec4(LightPosition_worldspace, 1)).xyz;

	vec3 LightDir_cameraspace = normalize(LightPosition_cameraspace - Position_cameraspace);

	float distance = length( LightPosition_worldspace - Position_worldspace );

	float diffuseLight = dot(LightDir_cameraspace, vertexNormal_cameraspace) * LightPower / (distance*distance);
	float ambientLight = 0.2;
	AmbientDiffuseLight = ambientLight+diffuseLight;

	vec3 eyeDir_cameraspace = normalize(vec3(0,0,0) - Position_cameraspace);

	vec3 refectDir = reflect(-LightDir_cameraspace, vertexNormal_cameraspace);
	SpecularLight = pow(clamp(dot(refectDir, eyeDir_cameraspace),0,1),5) * LightPower / (distance*distance);

	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}
